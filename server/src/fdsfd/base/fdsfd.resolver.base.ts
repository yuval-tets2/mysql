/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateFdsfdArgs } from "./CreateFdsfdArgs";
import { UpdateFdsfdArgs } from "./UpdateFdsfdArgs";
import { DeleteFdsfdArgs } from "./DeleteFdsfdArgs";
import { FdsfdCountArgs } from "./FdsfdCountArgs";
import { FdsfdFindManyArgs } from "./FdsfdFindManyArgs";
import { FdsfdFindUniqueArgs } from "./FdsfdFindUniqueArgs";
import { Fdsfd } from "./Fdsfd";
import { FdsfdService } from "../fdsfd.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Fdsfd)
export class FdsfdResolverBase {
  constructor(
    protected readonly service: FdsfdService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "read",
    possession: "any",
  })
  async _fdsfdsMeta(
    @graphql.Args() args: FdsfdCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fdsfd])
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "read",
    possession: "any",
  })
  async fdsfds(@graphql.Args() args: FdsfdFindManyArgs): Promise<Fdsfd[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fdsfd, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "read",
    possession: "own",
  })
  async fdsfd(
    @graphql.Args() args: FdsfdFindUniqueArgs
  ): Promise<Fdsfd | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fdsfd)
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "create",
    possession: "any",
  })
  async createFdsfd(@graphql.Args() args: CreateFdsfdArgs): Promise<Fdsfd> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Fdsfd)
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "update",
    possession: "any",
  })
  async updateFdsfd(
    @graphql.Args() args: UpdateFdsfdArgs
  ): Promise<Fdsfd | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Fdsfd)
  @nestAccessControl.UseRoles({
    resource: "Fdsfd",
    action: "delete",
    possession: "any",
  })
  async deleteFdsfd(
    @graphql.Args() args: DeleteFdsfdArgs
  ): Promise<Fdsfd | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
